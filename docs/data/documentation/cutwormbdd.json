{"topicSections":[{"identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase"],"title":"Essentials"},{"title":"Utilities","identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"CutwormBDD connects high-level ","type":"text"},{"isActive":true,"identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","type":"reference"},{"text":" feature specifications with tests.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"BDD capabilities are added through annotation-like function calls inserted within a test. When a test is run, Cutworm validates that the test fulfilled the Gherkin scenario and records the result.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Unlike Cucumber frameworks, Cutworm does not require splitting tests into independent steps, nor controls test execution. As a result, adapting existing tests is easy and Cutworm plays well with Xcode."}],"type":"paragraph"},{"text":"Getting Started","anchor":"Getting-Started","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To get a feel for how Cutworm works, open the CutwormBDDDemo project in Xcode and run the tests.","type":"text"}]},{"type":"heading","level":3,"anchor":"Adding-a-test","text":"Adding a test"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, create a directory named "},{"type":"codeVoice","code":"features"},{"text":" in your test target that contains the Gherkin feature definitions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"features\/authentication.feature","type":"codeVoice"}]},{"syntax":"cucumber","type":"codeListing","code":["Feature: Authentication","","    As a user, I want to be able to reliably log into my account","","    Scenario: Email login with valid credentials","        Given the user has an account","        When the user attempts to log in with their credentials","        Then the user is successfully logged in"]},{"inlineContent":[{"text":"For Swift packages, the test target should be set up with a dependency to CutwormBDD and the features in resources:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":[".testTarget(","    name: \"MyTests\",","    dependencies: [\"CutwormBDD\"],","    resources: [.copy(\"features\")]","),"]},{"inlineContent":[{"text":"Next, create a test case for a feature, and run the test once to generate the BDD template:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        \/\/ When executed, this replaces the body of `testLogin` with a BDD template.","        GenerateScenario_EXPERIMENTAL(\"Email login with valid credentials\")","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now that the template is generated, you can write your test, breaking down the parts of the test into steps:","type":"text"}]},{"code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        Scenario(\"Email login with valid credentials\")","","        Given(\"the user has an account\")","        \/\/ If an assertion failure occurs, or uncaught error is thrown during a step,","        \/\/ the step is failed and the scenario is consider failed.","        let user = try makeTestUser()","","        When(\"the user attempts to log in with their credentials\")","        loginScreen.typeCredentials(username: user.username, password: user.password)","","        let result = loginScreen.submit()","","        Then(\"the user is successfully logged in\")","","        XCTAssertEqual(result, .success)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, run the tests. You’ll see the BDD results printed in the Console, and exported to a JSON file:"}]},{"syntax":null,"type":"codeListing","code":["Exporting BDD results for MyTests...","Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","✅ when the user attempts to log in with their credentials (0.00s)","✅ then the user is successfully logged in (0.00s)","","Writing results to JSON file...","BDD result JSON is saved at path ...json"]},{"inlineContent":[{"type":"text","text":"In case the second step failed, the results would look like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","❌ when the user attempts to log in with their credentials (0.04s)","⏩ then the user is successfully logged in (0.00s)"]},{"anchor":"Limitations","level":2,"type":"heading","text":"Limitations"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Some Gherkin constructs are not yet supported, including "},{"code":"Scenario Outline","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Examples"},{"text":", ","type":"text"},{"code":"Background","type":"codeVoice"},{"type":"text","text":", "},{"code":"Rule","type":"codeVoice"},{"text":", and tags.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Export is currently only to a JSON file. This can be limiting with some real device testing providers if they don’t provide access to the file.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"variants":[{"paths":["\/documentation\/cutwormbdd"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"metadata":{"modules":[{"name":"CutwormBDD"}],"roleHeading":"Framework","title":"CutwormBDD","externalID":"CutwormBDD","role":"collection","symbolKind":"module"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"A native, lightweight BDD testing library for Swift\/XCTest."}],"identifier":{"url":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD","interfaceLanguage":"swift"},"references":{"https://cucumber.io/docs/gherkin/reference/":{"type":"link","title":"Gherkin","identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","titleInlineContent":[{"type":"text","text":"Gherkin"}],"url":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/"},"doc://CutwormBDD/documentation/CutwormBDD":{"type":"topic","kind":"symbol","url":"\/documentation\/cutwormbdd","abstract":[{"text":"A native, lightweight BDD testing library for Swift\/XCTest.","type":"text"}],"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD","role":"collection","title":"CutwormBDD"},"doc://CutwormBDD/documentation/CutwormBDD/BDDStepChainable":{"url":"\/documentation\/cutwormbdd\/bddstepchainable","navigatorTitle":[{"kind":"identifier","text":"BDDStepChainable"}],"abstract":[{"type":"text","text":"Allows chaining BDD steps inside a test to provide a natural reading experience."}],"role":"symbol","type":"topic","identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BDDStepChainable","kind":"identifier"}],"title":"BDDStepChainable"},"doc://CutwormBDD/documentation/CutwormBDD/BDDTestCase":{"navigatorTitle":[{"text":"BDDTestCase","kind":"identifier"}],"title":"BDDTestCase","role":"symbol","type":"topic","identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase","kind":"symbol","abstract":[{"text":"Give BDD superpowers to your test cases.","type":"text"}],"url":"\/documentation\/cutwormbdd\/bddtestcase","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BDDTestCase"}]}}}