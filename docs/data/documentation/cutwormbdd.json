{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Framework","symbolKind":"module","title":"CutwormBDD","externalID":"CutwormBDD","modules":[{"name":"CutwormBDD"}],"role":"collection"},"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"A native, lightweight BDD testing library for Swift\/XCTest."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"CutwormBDD connects high-level "},{"type":"reference","isActive":true,"identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/"},{"text":" feature specifications with tests.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"BDD capabilities are added through annotation-like function calls inserted within a test. When a test is run, Cutworm validates that the test fulfilled the Gherkin scenario and records the result."}]},{"type":"paragraph","inlineContent":[{"text":"Unlike Cucumber frameworks, Cutworm does not require splitting tests into independent steps, nor controls test execution. As a result, adapting existing tests is easy and Cutworm plays well with Xcode.","type":"text"}]},{"anchor":"Getting-Started","type":"heading","level":2,"text":"Getting Started"},{"inlineContent":[{"type":"text","text":"To get a feel for how Cutworm works, open the CutwormBDDDemo project in Xcode and run the tests."}],"type":"paragraph"},{"level":3,"text":"Adding a test","anchor":"Adding-a-test","type":"heading"},{"inlineContent":[{"type":"text","text":"First, create a directory named "},{"type":"codeVoice","code":"features"},{"text":" in your test target that contains the Gherkin feature definitions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"features\/authentication.feature"}]},{"syntax":"cucumber","type":"codeListing","code":["Feature: Authentication","","    As a user, I want to be able to reliably log into my account","","    Scenario: Email login with valid credentials","        Given the user has an account","        When the user attempts to log in with their credentials","        Then the user is successfully logged in"]},{"inlineContent":[{"type":"text","text":"For Swift packages, the test target should be set up with a dependency to CutwormBDD and the features in resources:"}],"type":"paragraph"},{"type":"codeListing","code":[".testTarget(","    name: \"MyTests\",","    dependencies: [\"CutwormBDD\"],","    resources: [.copy(\"features\")]","),"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, create a test case for a feature, and run the test once to generate the BDD template:"}]},{"type":"codeListing","syntax":"swift","code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        \/\/ When executed, this replaces the body of `testLogin` with a BDD template.","        GenerateScenario_EXPERIMENTAL(\"Email login with valid credentials\")","    }","}"]},{"inlineContent":[{"text":"Now that the template is generated, you can write your test, breaking down the parts of the test into steps:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        Scenario(\"Email login with valid credentials\")","","        Given(\"the user has an account\")","        \/\/ If an assertion failure occurs, or uncaught error is thrown during a step,","        \/\/ the step is failed and the scenario is consider failed.","        let user = try makeTestUser()","","        When(\"the user attempts to log in with their credentials\")","        loginScreen.typeCredentials(username: user.username, password: user.password)","","        let result = loginScreen.submit()","","        Then(\"the user is successfully logged in\")","","        XCTAssertEqual(result, .success)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, run the tests. You’ll see the BDD results printed in the Console, and exported to a JSON file:"}]},{"code":["Exporting BDD results for MyTests...","Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","✅ when the user attempts to log in with their credentials (0.00s)","✅ then the user is successfully logged in (0.00s)","","Writing results to JSON file...","BDD result JSON is saved at path ...json"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"In case the second step failed, the results would look like this:","type":"text"}]},{"code":["Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","❌ when the user attempts to log in with their credentials (0.04s)","⏩ then the user is successfully logged in (0.00s)"],"syntax":null,"type":"codeListing"},{"text":"Limitations","type":"heading","level":2,"anchor":"Limitations"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Some Gherkin constructs are not yet supported, including ","type":"text"},{"code":"Scenario Outline","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Examples"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Background"},{"type":"text","text":", "},{"code":"Rule","type":"codeVoice"},{"type":"text","text":", and tags."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Export is currently only to a JSON file. This can be limiting with some real device testing providers if they don’t provide access to the file."}]}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/cutwormbdd"]}],"sections":[],"identifier":{"url":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD","interfaceLanguage":"swift"},"kind":"symbol","topicSections":[{"title":"Essentials","identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase"]},{"title":"Utilities","identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable"]}],"references":{"doc://CutwormBDD/documentation/CutwormBDD":{"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD","type":"topic","abstract":[{"type":"text","text":"A native, lightweight BDD testing library for Swift\/XCTest."}],"role":"collection","kind":"symbol","title":"CutwormBDD","url":"\/documentation\/cutwormbdd"},"doc://CutwormBDD/documentation/CutwormBDD/BDDTestCase":{"url":"\/documentation\/cutwormbdd\/bddtestcase","kind":"symbol","role":"symbol","title":"BDDTestCase","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BDDTestCase"}],"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase","navigatorTitle":[{"kind":"identifier","text":"BDDTestCase"}],"abstract":[{"text":"Give BDD superpowers to your test cases.","type":"text"}],"type":"topic"},"doc://CutwormBDD/documentation/CutwormBDD/BDDStepChainable":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"BDDStepChainable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BDDStepChainable"}],"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable","role":"symbol","abstract":[{"type":"text","text":"Allows chaining BDD steps inside a test to provide a natural reading experience."}],"kind":"symbol","title":"BDDStepChainable","url":"\/documentation\/cutwormbdd\/bddstepchainable"},"https://cucumber.io/docs/gherkin/reference/":{"identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","type":"link","url":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","title":"Gherkin","titleInlineContent":[{"text":"Gherkin","type":"text"}]}}}