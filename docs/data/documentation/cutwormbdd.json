{"sections":[],"metadata":{"externalID":"CutwormBDD","modules":[{"name":"CutwormBDD"}],"title":"CutwormBDD","symbolKind":"module","roleHeading":"Framework","role":"collection"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"CutwormBDD connects high-level "},{"identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","isActive":true,"type":"reference"},{"text":" feature specifications with tests.","type":"text"}]},{"inlineContent":[{"text":"BDD capabilities are added through annotation-like function calls inserted within a test. When a test is run, Cutworm validates that the test fulfilled the Gherkin scenario and records the result.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Unlike Cucumber frameworks, Cutworm does not require splitting tests into independent steps, nor controls test execution. As a result, adapting existing tests is easy and Cutworm plays well with Xcode."}],"type":"paragraph"},{"text":"Getting Started","anchor":"Getting-Started","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To get a feel for how Cutworm works, open the CutwormBDDDemo project in Xcode and run the tests.","type":"text"}]},{"level":3,"text":"Adding a test","type":"heading","anchor":"Adding-a-test"},{"inlineContent":[{"text":"First, create a directory named ","type":"text"},{"type":"codeVoice","code":"features"},{"type":"text","text":" in your test target that contains the Gherkin feature definitions."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"features\/authentication.feature"}],"type":"paragraph"},{"type":"codeListing","syntax":"cucumber","code":["Feature: Authentication","","    As a user, I want to be able to reliably log into my account","","    Scenario: Email login with valid credentials","        Given the user has an account","        When the user attempts to log in with their credentials","        Then the user is successfully logged in"]},{"inlineContent":[{"text":"For Swift packages, the test target should be set up with a dependency to CutwormBDD and the features in resources:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":[".testTarget(","    name: \"MyTests\",","    dependencies: [\"CutwormBDD\"],","    resources: [.copy(\"features\")]","),"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, create a test case for a feature, and run the test once to generate the BDD template:"}]},{"type":"codeListing","code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        \/\/ When executed, this replaces the body of `testLogin` with a BDD template.","        GenerateScenario_EXPERIMENTAL(\"Email login with valid credentials\")","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Now that the template is generated, you can write your test, breaking down the parts of the test into steps:"}],"type":"paragraph"},{"syntax":"swift","code":["class AuthenticationTests: XCTestCase, BDDTestCase {","    override func setUp() {","        super.setUp()","","        \/\/ Informs Cutworm which feature is under test","        Feature(\"Authentication\", in: .module)","    }","","    func testLogin() throws {","        Scenario(\"Email login with valid credentials\")","","        Given(\"the user has an account\")","        \/\/ If an assertion failure occurs, or uncaught error is thrown during a step,","        \/\/ the step is failed and the scenario is consider failed.","        let user = try makeTestUser()","","        When(\"the user attempts to log in with their credentials\")","        loginScreen.typeCredentials(username: user.username, password: user.password)","","        let result = loginScreen.submit()","","        Then(\"the user is successfully logged in\")","","        XCTAssertEqual(result, .success)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, run the tests. You’ll see the BDD results printed in the Console, and exported to a JSON file:"}]},{"syntax":null,"code":["Exporting BDD results for MyTests...","Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","✅ when the user attempts to log in with their credentials (0.00s)","✅ then the user is successfully logged in (0.00s)","","Writing results to JSON file...","BDD result JSON is saved at path ...json"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In case the second step failed, the results would look like this:","type":"text"}]},{"code":["Feature: Authentication","Scenario: Email login with valid credentials","Steps:","✅ given the user has an account (0.00s)","❌ when the user attempts to log in with their credentials (0.04s)","⏩ then the user is successfully logged in (0.00s)"],"type":"codeListing","syntax":null},{"anchor":"Limitations","type":"heading","level":2,"text":"Limitations"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Some Gherkin constructs are not yet supported, including ","type":"text"},{"type":"codeVoice","code":"Scenario Outline"},{"type":"text","text":", "},{"type":"codeVoice","code":"Examples"},{"type":"text","text":", "},{"code":"Background","type":"codeVoice"},{"type":"text","text":", "},{"code":"Rule","type":"codeVoice"},{"type":"text","text":", and tags."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Export is currently only to a JSON file. This can be limiting with some real device testing providers if they don’t provide access to the file.","type":"text"}],"type":"paragraph"}]}]}],"kind":"content"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD"},"variants":[{"paths":["\/documentation\/cutwormbdd"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Essentials","identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase"]},{"title":"Utilities","identifiers":["doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable"]}],"abstract":[{"type":"text","text":"A native, lightweight BDD testing library for Swift\/XCTest."}],"hierarchy":{"paths":[[]]},"references":{"doc://CutwormBDD/documentation/CutwormBDD/BDDStepChainable":{"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDStepChainable","title":"BDDStepChainable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BDDStepChainable","kind":"identifier"}],"navigatorTitle":[{"text":"BDDStepChainable","kind":"identifier"}],"abstract":[{"text":"Allows chaining BDD steps inside a test to provide a natural reading experience.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/cutwormbdd\/bddstepchainable","kind":"symbol"},"doc://CutwormBDD/documentation/CutwormBDD":{"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD","title":"CutwormBDD","url":"\/documentation\/cutwormbdd","abstract":[{"type":"text","text":"A native, lightweight BDD testing library for Swift\/XCTest."}],"kind":"symbol","type":"topic","role":"collection"},"doc://CutwormBDD/documentation/CutwormBDD/BDDTestCase":{"identifier":"doc:\/\/CutwormBDD\/documentation\/CutwormBDD\/BDDTestCase","kind":"symbol","abstract":[{"type":"text","text":"Give BDD superpowers to your test cases."}],"url":"\/documentation\/cutwormbdd\/bddtestcase","title":"BDDTestCase","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BDDTestCase"}],"navigatorTitle":[{"text":"BDDTestCase","kind":"identifier"}],"role":"symbol"},"https://cucumber.io/docs/gherkin/reference/":{"identifier":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","url":"https:\/\/cucumber.io\/docs\/gherkin\/reference\/","type":"link","titleInlineContent":[{"type":"text","text":"Gherkin"}],"title":"Gherkin"}}}